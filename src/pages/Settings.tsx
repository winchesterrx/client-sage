
import React from 'react';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { databaseSchema } from '@/types/database';
import { supabase } from '@/lib/supabase';

const Settings = () => {
  const [supabaseStatus, setSupabaseStatus] = React.useState<'connected' | 'disconnected' | 'checking'>('checking');
  
  React.useEffect(() => {
    const checkConnection = async () => {
      try {
        const { data, error } = await supabase.from('clients').select('count', { count: 'exact', head: true });
        setSupabaseStatus(error ? 'disconnected' : 'connected');
      } catch (e) {
        setSupabaseStatus('disconnected');
      }
    };
    
    checkConnection();
  }, []);
  
  return (
    <div className="space-y-8">
      <div>
        <h1 className="text-3xl font-bold text-gray-900">Configurações</h1>
        <p className="text-gray-500 mt-1">Gerencie as configurações do sistema</p>
      </div>
      
      <Card className="bg-white shadow-sm border">
        <CardHeader>
          <CardTitle>Informações do Supabase</CardTitle>
        </CardHeader>
        <CardContent>
          <div className="space-y-4">
            <div>
              <h3 className="text-sm font-medium text-gray-500">Status de Conexão</h3>
              <div className="flex items-center gap-2 mt-1">
                <div className={`w-2 h-2 rounded-full ${
                  supabaseStatus === 'connected' ? 'bg-green-500' : 
                  supabaseStatus === 'disconnected' ? 'bg-red-500' : 'bg-yellow-500'
                }`}></div>
                <span>
                  {supabaseStatus === 'connected' ? 'Conectado' : 
                   supabaseStatus === 'disconnected' ? 'Desconectado' : 'Verificando conexão...'}
                </span>
              </div>
            </div>
            
            <div>
              <h3 className="text-sm font-medium text-gray-500">URL do Supabase</h3>
              <p className="mt-1 text-sm">
                Para completar a configuração, substitua os valores no arquivo <code>src/lib/supabase.ts</code>:
              </p>
              <ul className="list-disc pl-5 mt-2 text-sm space-y-1">
                <li><strong>supabaseUrl</strong>: URL do seu projeto Supabase</li>
                <li><strong>supabaseKey</strong>: Chave anônima (anon) do seu projeto Supabase</li>
              </ul>
            </div>
          </div>
        </CardContent>
      </Card>
      
      <Card className="bg-white shadow-sm border">
        <CardHeader>
          <CardTitle>Schema SQL do Banco de Dados</CardTitle>
        </CardHeader>
        <CardContent>
          <p className="text-sm text-gray-500 mb-4">
            Use este SQL para criar as tabelas necessárias no Supabase. Para isso, vá para:
            <br />
            1. Painel do Supabase → "Table Editor" → "SQL Editor" → Colar o código abaixo → "Run"
          </p>
          <pre className="bg-gray-900 text-white p-4 rounded-md overflow-auto text-xs">
{`-- Clients table
CREATE TABLE clients (
  id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  name TEXT NOT NULL,
  city TEXT NOT NULL,
  phone TEXT NOT NULL,
  email TEXT,
  created_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
  updated_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP
);

-- Services table
CREATE TABLE services (
  id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  client_id BIGINT NOT NULL REFERENCES clients(id) ON DELETE CASCADE,
  service_type TEXT NOT NULL,
  price DECIMAL(10, 2) NOT NULL,
  access_link TEXT NOT NULL,
  username TEXT NOT NULL,
  password TEXT NOT NULL,
  status TEXT CHECK (status IN ('active', 'inactive', 'pending')) DEFAULT 'active',
  created_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
  updated_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP
);

-- Payments table
CREATE TABLE payments (
  id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  client_id BIGINT NOT NULL REFERENCES clients(id) ON DELETE CASCADE,
  service_id BIGINT NOT NULL REFERENCES services(id) ON DELETE CASCADE,
  amount DECIMAL(10, 2) NOT NULL,
  payment_date DATE,
  due_date DATE NOT NULL,
  status TEXT CHECK (status IN ('paid', 'pending', 'overdue')) DEFAULT 'pending',
  payment_method TEXT,
  notes TEXT,
  created_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
  updated_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP
);

-- Projects table
CREATE TABLE projects (
  id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  client_id BIGINT NOT NULL REFERENCES clients(id) ON DELETE CASCADE,
  name TEXT NOT NULL,
  description TEXT,
  status TEXT CHECK (status IN ('planning', 'in_progress', 'completed', 'on_hold')) DEFAULT 'planning',
  start_date DATE NOT NULL,
  end_date DATE,
  created_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
  updated_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP
);

-- Tasks table
CREATE TABLE tasks (
  id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  project_id BIGINT NOT NULL REFERENCES projects(id) ON DELETE CASCADE,
  name TEXT NOT NULL,
  description TEXT,
  status TEXT CHECK (status IN ('todo', 'in_progress', 'completed')) DEFAULT 'todo',
  due_date DATE,
  priority TEXT CHECK (priority IN ('low', 'medium', 'high')) DEFAULT 'medium',
  created_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
  updated_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP
);

-- Attachments table
CREATE TABLE attachments (
  id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  related_id BIGINT NOT NULL,
  related_type TEXT CHECK (related_type IN ('client', 'project', 'service', 'task')) NOT NULL,
  file_name TEXT NOT NULL,
  file_path TEXT NOT NULL,
  file_type TEXT NOT NULL,
  file_size INTEGER NOT NULL,
  created_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
  updated_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP
);

-- Criar um bucket para armazenamento de arquivos
-- (Execute isso no console SQL após criar as tabelas)
-- INSERT INTO storage.buckets (id, name) VALUES ('attachments', 'attachments');`}
          </pre>
          
          <div className="mt-4 p-4 bg-yellow-50 border border-yellow-200 rounded-md">
            <h3 className="font-medium text-yellow-800">Configuração de Permissões</h3>
            <p className="mt-1 text-sm text-yellow-700">
              No painel do Supabase, acesse a seção "Authentication" → "Policies" e adicione políticas de permissão 
              (RLS - Row Level Security) para cada tabela. Para o início, você pode desativar o RLS para testes.
            </p>
          </div>
        </CardContent>
      </Card>
      
      <Card className="bg-white shadow-sm border">
        <CardHeader>
          <CardTitle>Passos para Completar a Configuração</CardTitle>
        </CardHeader>
        <CardContent>
          <ol className="list-decimal pl-5 space-y-2">
            <li>
              <strong>Criar projeto no Supabase</strong>
              <p className="text-sm text-gray-600">Acesse supabase.com e crie um novo projeto.</p>
            </li>
            <li>
              <strong>Obter URL e Chave do Projeto</strong>
              <p className="text-sm text-gray-600">No painel do Supabase, vá para "Project Settings" → "API" e copie a URL e a chave anônima.</p>
            </li>
            <li>
              <strong>Atualizar configuração</strong>
              <p className="text-sm text-gray-600">Edite o arquivo <code>src/lib/supabase.ts</code> com suas credenciais do Supabase.</p>
            </li>
            <li>
              <strong>Criar Tabelas</strong>
              <p className="text-sm text-gray-600">Use o SQL fornecido acima para criar as tabelas no editor SQL do Supabase.</p>
            </li>
            <li>
              <strong>Criar Bucket para Armazenamento</strong>
              <p className="text-sm text-gray-600">No painel do Supabase, vá para "Storage" e crie um novo bucket chamado "attachments".</p>
            </li>
          </ol>
        </CardContent>
      </Card>
    </div>
  );
};

export default Settings;
